// Code generated by protoc-gen-go. DO NOT EDIT.
// source: du.proto

package du

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type Name struct {
	Name                 string   `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Name) Reset()         { *m = Name{} }
func (m *Name) String() string { return proto.CompactTextString(m) }
func (*Name) ProtoMessage()    {}
func (*Name) Descriptor() ([]byte, []int) {
	return fileDescriptor_e530c1fa29c9abff, []int{0}
}

func (m *Name) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Name.Unmarshal(m, b)
}
func (m *Name) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Name.Marshal(b, m, deterministic)
}
func (m *Name) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Name.Merge(m, src)
}
func (m *Name) XXX_Size() int {
	return xxx_messageInfo_Name.Size(m)
}
func (m *Name) XXX_DiscardUnknown() {
	xxx_messageInfo_Name.DiscardUnknown(m)
}

var xxx_messageInfo_Name proto.InternalMessageInfo

func (m *Name) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

type Reply struct {
	Message              string   `protobuf:"bytes,1,opt,name=message,proto3" json:"message,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Reply) Reset()         { *m = Reply{} }
func (m *Reply) String() string { return proto.CompactTextString(m) }
func (*Reply) ProtoMessage()    {}
func (*Reply) Descriptor() ([]byte, []int) {
	return fileDescriptor_e530c1fa29c9abff, []int{1}
}

func (m *Reply) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Reply.Unmarshal(m, b)
}
func (m *Reply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Reply.Marshal(b, m, deterministic)
}
func (m *Reply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Reply.Merge(m, src)
}
func (m *Reply) XXX_Size() int {
	return xxx_messageInfo_Reply.Size(m)
}
func (m *Reply) XXX_DiscardUnknown() {
	xxx_messageInfo_Reply.DiscardUnknown(m)
}

var xxx_messageInfo_Reply proto.InternalMessageInfo

func (m *Reply) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

func init() {
	proto.RegisterType((*Name)(nil), "Name")
	proto.RegisterType((*Reply)(nil), "Reply")
}

func init() { proto.RegisterFile("du.proto", fileDescriptor_e530c1fa29c9abff) }

var fileDescriptor_e530c1fa29c9abff = []byte{
	// 111 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xe2, 0x48, 0x29, 0xd5, 0x2b,
	0x28, 0xca, 0x2f, 0xc9, 0x57, 0x92, 0xe2, 0x62, 0xf1, 0x4b, 0xcc, 0x4d, 0x15, 0x12, 0xe2, 0x62,
	0xc9, 0x4b, 0xcc, 0x4d, 0x95, 0x60, 0x54, 0x60, 0xd4, 0xe0, 0x0c, 0x02, 0xb3, 0x95, 0x14, 0xb9,
	0x58, 0x83, 0x52, 0x0b, 0x72, 0x2a, 0x85, 0x24, 0xb8, 0xd8, 0x73, 0x53, 0x8b, 0x8b, 0x13, 0xd3,
	0x61, 0xf2, 0x30, 0xae, 0x91, 0x34, 0x17, 0x53, 0x4a, 0xa9, 0x90, 0x28, 0x17, 0x53, 0x46, 0xa6,
	0x10, 0xab, 0x1e, 0xc8, 0x24, 0x29, 0x36, 0x3d, 0xb0, 0x26, 0x25, 0x86, 0x24, 0x36, 0xb0, 0x15,
	0xc6, 0x80, 0x00, 0x00, 0x00, 0xff, 0xff, 0x55, 0xdb, 0x37, 0xb4, 0x6e, 0x00, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// DuClient is the client API for Du service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type DuClient interface {
	Hi(ctx context.Context, in *Name, opts ...grpc.CallOption) (*Reply, error)
}

type duClient struct {
	cc *grpc.ClientConn
}

func NewDuClient(cc *grpc.ClientConn) DuClient {
	return &duClient{cc}
}

func (c *duClient) Hi(ctx context.Context, in *Name, opts ...grpc.CallOption) (*Reply, error) {
	out := new(Reply)
	err := c.cc.Invoke(ctx, "/du/hi", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DuServer is the server API for Du service.
type DuServer interface {
	Hi(context.Context, *Name) (*Reply, error)
}

// UnimplementedDuServer can be embedded to have forward compatible implementations.
type UnimplementedDuServer struct {
}

func (*UnimplementedDuServer) Hi(ctx context.Context, req *Name) (*Reply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Hi not implemented")
}

func RegisterDuServer(s *grpc.Server, srv DuServer) {
	s.RegisterService(&_Du_serviceDesc, srv)
}

func _Du_Hi_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Name)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DuServer).Hi(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/du/Hi",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DuServer).Hi(ctx, req.(*Name))
	}
	return interceptor(ctx, in, info, handler)
}

var _Du_serviceDesc = grpc.ServiceDesc{
	ServiceName: "du",
	HandlerType: (*DuServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "hi",
			Handler:    _Du_Hi_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "du.proto",
}
